for (i in 1:10) {
print(paste('This is the current slot:', i))
}
# A simple while-loop
number = 0
while (number < 10){ # While the number is below 10, do the following
print(number)
number = number + 1
}
# your simple while-loop here
# Function to convert Fahrenheit to Celsius
convert_to_celsius <- function(fahrenheit) {
Celcius = (fahrenheit-32)*5/9
print(Celcius)
# Hint: Apply the conversion formula within the function
}
# Example of how the final function (when you've written it) should be used:
temp_celsius <- convert_to_celsius(68)
print(temp_celsius)
# Expected Output (for fahrenheit = 68): 20
# Function to give clothing advice based on temperature
clothing_advice <- function(temperature) {
if (temperature > 25) {
print('Wear a t-shirt')
} else if (temperature %in% 15:25) {
print('wear a light jacket')
} else {
print('warm coat')
}
# Hint: Use if-else statements to check the temperature and return the advice
}
# Example of how the final function (when you've written it) should be used:
advice <- clothing_advice(20)
print(advice)
# Expected Output (for temperature = 20): "Wear a light jacket."
n_girls <- rbinom(1, 400, 0.488)
print(n_girls)
n_sims <- 1000
n_girls <- rep(NA, n_sims)
for (s in 1:n_sims){
n_girls[s] <- rbinom(1, 400, 0.488)
}
hist(n_girls)
birth_type <- sample(c("fraternal twin","identical twin","single birth"),
size=400, replace=TRUE, prob=c(1/125, 1/300, 1 - 1/125 - 1/300))
girls <- rep(NA, 400)
for (i in 1:400){
if (birth_type[i]=="single birth") {
girls[i] <- rbinom(1, 1, 0.488)
} else if (birth_type[i]=="identical twin") {
girls[i] <- 2*rbinom(1, 1, 0.495)
} else if (birth_type[i]=="fraternal twin") {
girls[i] <- rbinom(1, 2, 0.495)
}
}
n_girls <- sum(girls)
n_girls
# Function to simulate basketball player
basketball <- function(allowed_misses) {
consecutive_misses <- 0
shots_made <- 0
number_of_hits <- 0
while (consecutive_misses < allowed_misses) {
shots_made <- shots_made + 1
if (rbinom(1, 1, 0.4) == 1) {
consecutive_misses <- consecutive_misses + 1
} else {
consecutive_misses <- 0
number_of_hits <- number_of_hits + 1
}
}
return(list(shots_made = shots_made, number_of_hits = number_of_hits))
}
number_of_sims <- 1000
simulated_basket_data <- vector("list", number_of_sims)
for (i in 1:number_of_sims) {
simulated_basket_data[[i]] <-  basketball(2)
}
View(simulated_basket_data)
set.seed(45)
basketball(2)
set.seed(45)
basketball(2)
set.seed(45)
basketball(2)[1]
set.seed(45)
basketball(2)[2]
set.seed(45)
basketball(2)$number_of_hits
set.seed(45)
basketball(2)$shots_made
number_of_sims <- 1000
basket_shots <- rep(NA, number_of_sims)
basket_hits <- rep(NA, number_of_sims)
for (i in 1:number_of_sims) {
basket_shots[i] <-  basketball(2)$shots_made
basket_hits[i] <-  basketball(2)$number_of_hits
}
simulated_basket_data_df <- data.frame(basket_shots,basket_hits)
View(simulated_basket_data_df)
# Function to simulate basketball player
basketball <- function(allowed_misses) {
consecutive_misses <- 0
shots_made <- 0
number_of_hits <- 0
while (consecutive_misses < allowed_misses) {
shots_made <- shots_made + 1
if (rbinom(1, 1, 0.4) == 1) {
consecutive_misses <- consecutive_misses + 1
} else {
consecutive_misses <- 0
number_of_hits <- number_of_hits + 1
}
}
return(list(shots_made = shots_made, number_of_hits = number_of_hits))
}
set.seed(45)
basketball(2)
number_of_sims <- 1000
basket_shots <- rep(NA, number_of_sims)
basket_hits <- rep(NA, number_of_sims)
for (i in 1:number_of_sims) {
basket_shots[i] <-  basketball(2)$shots_made
basket_hits[i] <-  basketball(2)$number_of_hits
}
number_of_sims <- 1000
basket_shots <- rep(NA, number_of_sims)
basket_hits <- rep(NA, number_of_sims)
for (i in 1:number_of_sims) {
result <- basketball(2)
basket_shots[i] <- result$shots_made
basket_hits[i] <- result$number_of_hits
}
simulated_basket_data_df <- data.frame(basket_shots,basket_hits)
View(simulated_basket_data_df)
number_of_sims <- 1000
basket_shots <- rep(NA, number_of_sims)
basket_hits <- rep(NA, number_of_sims)
for (i in 1:number_of_sims) {
result <- basketball(2)
basket_shots[i] <- result$shots_made
basket_hits[i] <- result$number_of_hits
}
simulated_basket_data_df <- data.frame(basket_shots,basket_hits)
mean_data <- mean(simulated_basket_data_df$basket_shots)
sd_data <- sd(simulated_basket_data_df$basket_shots)
print(paste('This is the mean of the data:', mean_data, 'and the sd:',sd_data))
ggplot(simulated_basket_data_df, aes(x = basket_shots)) +
geom_histogram(binwidth = 1) +
labs(
x = "number of throws",
y = "Count",
title = "How many throws without missing two in a row",
subtitle = "simulated data from 1000 trials") +
coord_cartesian(xlim = c(0, 50))
number_of_sims <- 1000
basket_shots <- rep(NA, number_of_sims)
basket_hits <- rep(NA, number_of_sims)
for (i in 1:number_of_sims) {
result <- basketball(2)
basket_shots[i] <- result$shots_made
basket_hits[i] <- result$number_of_hits
}
basket_data_df <- data.frame(basket_shots,basket_hits)
mean_data <- mean(basket_data_df$basket_shots)
sd_data <- sd(basket_data_df$basket_shots)
print(paste('This is the mean of the data:', mean_data, 'and the sd:',sd_data))
ggplot(basket_data_df, aes(x = basket_shots)) +
geom_histogram(binwidth = 1) +
labs(
x = "number of throws",
y = "Count",
title = "How many throws without missing two in a row",
subtitle = "simulated data from 1000 trials") +
coord_cartesian(xlim = c(0, 50))
basket_data_df <- basket_data_df %>% mutate(ROS = basket_shots/basket_hits)
View(basket_data_df)
ggplot(basket_data_df, aes(x = basket_shots, y = ROS))+
geom_point()
basket_data_df <- basket_data_df %>% mutate(ROS = basket_hits/basket_shots)
ggplot(basket_data_df, aes(x = basket_shots, y = ROS))+
geom_point() +
labs(
x = "number of throws",
y = "Count",
title = "How many throws without missing two in a row",
subtitle = "simulated data from 1000 trials") +
theme_minimal()
basket_data_df <- basket_data_df %>% mutate(ROS = basket_hits/basket_shots)
ggplot(basket_data_df, aes(x = basket_shots, y = ROS))+
geom_point() +
labs(
x = "number of throws",
y = "proportion of hits",
title = "hit rate by shots taken") +
theme_minimal()
rbinom(10,10,0.4)
rbinom(1,10,0.4)
rbinom(10,1,0.4)
dbinom(3, size = 10, prob = 0.4)
dbinom(3, size = 10, prob = 0.4)
dbinom(3, 10, 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
}
shotfunction(shots = 10, prop = 0.4)
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
for (i in 1:shots){
if (rbinom(1,1,prop) == 1){
hits <- hits + 1
}
else {
hits <- hits + 0
}
}
return(hits)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
sim_shots <- rep(NA, shots)
for (i in 1:shots){
sim_shots[i] <- rbinom(1,1,prop)  }
return(sim_shots)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
sim_shots <- rep(NA, shots)
for (i in 1:shots){
sim_shots[i] <- rbinom(1,1,prop)  }
return(sim_shots)
}
shotfunction(shots = 10, prop = 0.4)
shotfunction <- function(shots,prop){
hits <- 0
sim_shots <- rep(NA, shots)
for (i in 1:shots){
sim_shots[i] <- rbinom(1,1,prop)  }
return(sim_shots)
}
shotfunction(shots = 10, prop = 0.4)
t1 <- shotfunction(shots = 10, prop = 0.4)
set.seed(33)
t1 <- shotfunction(shots = 10, prop = 0.4)
t1
sum(t1)
sims <- 10000
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4))
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 1)
sims <- 10000
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4))
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 0.5)
shotfunction <- function(shots,prop){
sim_shots <- rep(NA, shots)
for (i in 1:shots){
sim_shots[i] <- rbinom(1,1,prop)  }
return(sim_shots)
}
shotfunction(shots = 10, prop = 0.4)
sims <- 10000
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4))
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 0.5)
mean(sim_data == 3)
sims <- 10
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4)) #Do 10000 runs of the function and save the number of hits in a vector
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 0.5) #Plot it for obvious reasons
mean(sim_data == 3) #Calculate the proportion of values being 3 in the vector of 1000 observations
sims <- 100
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4)) #Do 10000 runs of the function and save the number of hits in a vector
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 0.5) #Plot it for obvious reasons
mean(sim_data == 3) #Calculate the proportion of values being 3 in the vector of 1000 observations
sims <- 1000
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4)) #Do 10000 runs of the function and save the number of hits in a vector
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 0.5) #Plot it for obvious reasons
mean(sim_data == 3) #Calculate the proportion of values being 3 in the vector of 1000 observations
sims <- 10000
sim_data <- rep(NA,sims)
for (i in 1:sims){
sim_data[i] <- sum(shotfunction(shots = 10, prop = 0.4)) #Do 10000 runs of the function and save the number of hits in a vector
}
sim_data <- data.frame(sim_data)
ggplot(sim_data, aes(x = sim_data)) +
geom_histogram(binwidth = 0.5) #Plot it for obvious reasons
mean(sim_data == 3) #Calculate the proportion of values being 3 in the vector of 1000 observations
# Set seed for reproducibility
set.seed(42)
# Simulate 1000 samples of the sum of 20 independent uniform(0, 1) random variables
num_simulations <- 1000
sample_size <- 20
simulated_sums <- replicate(num_simulations, sum(runif(sample_size)))
# Plot histogram
hist(simulated_sums, prob = TRUE, col = "lightblue", main = "Central Limit Theorem Demonstration",
xlab = "Sum of 20 Uniform(0,1) Random Variables")
# Overlay a graph of the normal density
mu <- sample_size * 0.5  # Mean of the sum of uniform(0,1) random variables
sigma <- sqrt(sample_size / 12)  # Standard deviation of the sum of uniform(0,1) random variables
curve(dnorm(x, mean = mu, sd = sigma), add = TRUE, col = "darkred", lwd = 2)
# Add legend
legend("topright", legend = c("Histogram", "Normal Approximation"),
fill = c("lightblue", "white"), border = c("black", "darkred"))
# Simulate 1000 samples of the sum of 20 independent uniform(0, 1) random variables
num_simulations <- 1000
sample_size <- 20
simulated_sums <- replicate(num_simulations, sum(runif(sample_size)))
# Plot histogram
hist(simulated_sums, col = "lightblue", main = "Central Limit Theorem Demonstration",
xlab = "Sum of 20 Uniform(0,1) Random Variables")
# Overlay a graph of the normal density
mu <- sample_size * 0.5  # Mean of the sum of uniform(0,1) random variables
sigma <- sqrt(sample_size / 12)  # Standard deviation of the sum of uniform(0,1) random variables
curve(dnorm(x, mean = mu, sd = sigma), add = TRUE, col = "darkred", lwd = 2)
# Add legend
legend("topright", legend = c("Histogram", "Normal Approximation"),
fill = c("lightblue", "white"), border = c("black", "darkred"))
# Simulate 1000 samples of the sum of 20 independent uniform(0, 1) random variables
num_simulations <- 1000
sample_size <- 20
simulated_sums <- replicate(num_simulations, sum(runif(sample_size)))
# Plot histogram
hist(simulated_sums, prob = TRUE, col = "lightblue", main = "Central Limit Theorem Demonstration",
xlab = "Sum of 20 Uniform(0,1) Random Variables")
# Overlay a graph of the normal density
mu <- sample_size * 0.5  # Mean of the sum of uniform(0,1) random variables
sigma <- sqrt(sample_size / 12)  # Standard deviation of the sum of uniform(0,1) random variables
curve(dnorm(x, mean = mu, sd = sigma), add = TRUE, col = "darkred", lwd = 2)
# Add legend
legend("topright", legend = c("Histogram", "Normal Approximation"),
fill = c("lightblue", "white"), border = c("black", "darkred"))
