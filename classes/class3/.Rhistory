yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_bar(stat = "identity",fill = "violet", color = "white") +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count")
mean_return <- 0.07
sd_return <- 0.1
investement_years <- 30
initial_investement <- 10000
final_portfolio <- c()
n_sims <- 1000
for (i in 1:n_sims) {
for (year_ in 1:investement_years) {
yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram() +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count")
mean_return <- 0.07
sd_return <- 0.1
investement_years <- 30
initial_investement <- 10000
final_portfolio <- c()
n_sims <- 1000
for (i in 1:n_sims) {
for (year_ in 1:investement_years) {
yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 1000) +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count")
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000) +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count")
mean_return <- 0.07
sd_return <- 0.1
investement_years <- 30
initial_investement <- 10000
final_portfolio <- c()
n_sims <- 1000
for (i in 1:n_sims) {
for (year_ in 1:investement_years) {
yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000) +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
mean_return <- 0.07
sd_return <- 0.1
investement_years <- 30
initial_investement <- 10000
final_portfolio <- c()
n_sims <- 1000
for (i in 1:n_sims) {
for (year_ in 1:investement_years) {
yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000, fill = 'red') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
mean_return <- 0.07
sd_return <- 0.1
investement_years <- 30
initial_investement <- 10000
final_portfolio <- c()
n_sims <- 1000
for (i in 1:n_sims) {
for (year_ in 1:investement_years) {
yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
print(paste('The mean portfolio value after 30 years is: ',mean(final_portfolio_df$final_portfolio),'and the sd is: ', sd(final_portfolio_df$final_portfolio)))
print(paste('The mean portfolio value after 30 years is: ',round(mean(final_portfolio_df$final_portfolio)),'and the sd is: ', sd(final_portfolio_df$final_portfolio)))
print(paste('The mean portfolio value after 30 years is: ',round(mean(final_portfolio_df$final_portfolio)),'and the sd is: ', round(sd(final_portfolio_df$final_portfolio)))
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = log(final_portfolio))) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
final_portfolio_df <-
final_portfolio_df %>% mutate(final_portfolio_log = log(final_portfolio))
View(portfolio_df)
View(final_portfolio_df)
ggplot(final_portfolio_df, aes(x = final_portfolio_log)) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
final_portfolio_df <-
final_portfolio_df %>% mutate(final_portfolio_log = log(final_portfolio))
ggplot(final_portfolio_df, aes(x = final_portfolio_log)) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio_log)) +
geom_histogram(binwidth = 10, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio_log)) +
geom_histogram(binwidth = 1, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio_log)) +
geom_histogram(binwidth = 0.1, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 1000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
mean_return <- 0.07
sd_return <- 0.1
investement_years <- 30
initial_investement <- 10000
final_portfolio <- c()
n_sims <- 1000
for (i in 1:n_sims) {
for (year_ in 1:investement_years) {
yearly_return <- 1 + rnorm(1, mean_return, sd_return)
if (year_ == 1) {
portfolio <- initial_investement * yearly_return
} else {
portfolio <- portfolio * yearly_return
}
}
final_portfolio[i] <- portfolio
}
final_portfolio_df <- data.frame(final_portfolio)
final_portfolio_df <-
final_portfolio_df %>% mutate(final_portfolio_log = log(final_portfolio))
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 1000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
print(paste('The mean portfolio value after 30 years is: ',
round(mean(final_portfolio_df$final_portfolio)),
'and the sd is: ', round(sd(final_portfolio_df$final_portfolio)))
'and the sd is: ', round(sd(final_portfolio_df$final_portfolio)))'9
print(paste('The mean portfolio value after 30 years is: ',
round(mean(final_portfolio_df$final_portfolio)),
'and the sd is: ', round(sd(final_portfolio_df$final_portfolio))))
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 1000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 100, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 100, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
ggplot(final_portfolio_df, aes(x = final_portfolio)) +
geom_histogram(binwidth = 10000, fill = 'skyblue', color = 'black') +
ggtitle("Portfolio distribution") +
xlab("Money after 30 years") +
ylab("count") +
theme_minimal()
rbinom(20,1,0.3)
ggplot(hits, aes(x=hits))+
geom_bar()
hits <- c()
for (i in 1:1000){
hits[i] <- sum(rbinom(20,1,0.3))
}
hits <- data.frame(hits)
ggplot(hits, aes(x=hits))+
geom_bar()
ggplot(hits, aes(x=hits))+
geom_bar(fill = '33FF99')
ggplot(hits, aes(x=hits))+
geom_bar(fill = 'FFFFFF')
ggplot(hits, aes(x=hits))+
geom_bar(fill = "pink")
ggplot(hits, aes(x=hits))+
geom_bar(fill = "pink", color = "black")+
theme_minimal()
rbinom(1,6,1/6)
rbinom(6,6,1/6)
rbinom(6,6,1/6)
rbinom(6,6,1/6)
simulate_dice_roll <- function(probabilities) {
if (sum(probabilities) != 1) {
stop("Probabilities must sum to 1.")
}
# Simulate dice roll based on probabilities
result <- sample(1:length(probabilities), size = 1, prob = probabilities)
return(result)
}
# Define probabilities for each side of the dice
custom_probabilities <- c(0.05, 0.10, 0.35, 0.25, 0.15, 0.10)
# Simulate a dice roll
result <- simulate_dice_roll(custom_probabilities)
cat("The dice landed on:", result)
simulate_dice_roll <- function(probabilities) {
if (sum(probabilities) != 1) {
stop("Probabilities must sum to 1.")
}
# Simulate dice roll based on probabilities
result <- sample(1:length(probabilities), size = 1, prob = probabilities)
return(result)
}
# Define probabilities for each side of the dice
custom_probabilities <- c(0.05, 0.10, 0.35, 0.25, 0.15, 0.10)
# Simulate a dice roll
result <- simulate_dice_roll(custom_probabilities)
cat("The dice landed on:", result)
simulate_dice_roll <- function(probabilities) {
if (sum(probabilities) != 1) {
stop("Probabilities must sum to 1.")
}
# Simulate dice roll based on probabilities
result <- sample(1:length(probabilities), size = 1, prob = probabilities)
return(result)
}
# Define probabilities for each side of the dice
custom_probabilities <- c(0.05, 0.10, 0.35, 0.25, 0.15, 0.10)
# Simulate a dice roll
result <- simulate_dice_roll(custom_probabilities)
cat("The dice landed on:", result)
simulate_dice_roll <- function(probabilities) {
if (sum(probabilities) != 1) {
stop("Probabilities must sum to 1.")
}
# Simulate dice roll based on probabilities
result <- sample(1:length(probabilities), size = 1, prob = probabilities)
return(result)
}
coin_toss <- c()
custom_probabilities <- c(0.05, 0.10, 0.35, 0.25, 0.15, 0.10)
for (i in 1:10000){
coin_toss[i] <- simulate_dice_roll(custom_probabilities)
}
coin_toss <- data.frame(coin_toss)
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'green', color = 'black')
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'green',
color = 'black',
binwidth = 1)
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'darkgreen',
color = 'black',
binwidth = 1)
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'darkgreen',
color = 'black',
binwidth = 1)+
theme_minimal()
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'darkgreen',
color = 'black',
binwidth = .99)+
theme_minimal()
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'darkgreen',
color = 'black',
binwidth = .9)+
theme_minimal()
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'darkgreen',
color = 'black',
binwidth = .5)+
theme_minimal()
ggplot(coin_toss, aes(x = coin_toss))+
geom_histogram(fill = 'darkgreen',
color = 'black',
binwidth = 1)+
theme_minimal()
coin_toss %>% mean(coin_toss)
mean(coin_toss$coin_toss)
sd(coin_toss$coin_toss)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
for (i in 1:5000){
rbinom(1,1,0.5)
}
heads <- 0
for (i in 1:5000){
coinflip <- rbinom(1,1,0.5)
if (coinflip == 0){
heads <- heads + 1
}else{
}
}
proportion_of_heads <- sum(heads)/5000
heads <- 0
for (i in 1:5000){
coinflip <- rbinom(1,1,0.5)
if (coinflip == 0){
heads <- heads + 1
}else{
}
}
proportion_of_heads <- sum(heads)/5000
print(proportion_of_heads)
# Define a range of x values
x <- seq(-5, 5, 0.1)
# Define different mean and standard deviation parameters
means <- c(0, 1, -2)
sds <- c(1, 0.5, 2)
# Plot normal distribution curves
for (i in 1:length(means)) {
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(0, 0.5),
add = i > 1)
legend("topright", legend = c(paste("Mean =", means[i], ", SD =", sds[i])), col = i, lwd = 2)
}
# Add a legend
legend("topright", legend = c("Mean = 0, SD = 1", "Mean = 1, SD = 0.5", "Mean = -2, SD = 2"), col = 1:3, lwd = 2)
# Define a range of x values
x <- seq(-5, 5, 0.1)
# Define different mean and standard deviation parameters
means <- c(0, 1, -2)
sds <- c(1, 0.5, 2)
# Plot normal distribution curves
for (i in 1:length(means)) {
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(0, 1),
add = i > 1)
legend("topright", legend = c(paste("Mean =", means[i], ", SD =", sds[i])), col = i, lwd = 2)
}
# Add a legend
legend("topright", legend = c("Mean = 0, SD = 1", "Mean = 1, SD = 0.5", "Mean = -2, SD = 2"), col = 1:3, lwd = 2)
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(-7, 4),
add = i > 1)
# Define a range of x values
x <- seq(-5, 5, 0.1)
# Define different mean and standard deviation parameters
means <- c(0, 1, -2)
sds <- c(1, 0.5, 2)
# Plot normal distribution curves
for (i in 1:length(means)) {
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(-7, 4),
add = i > 1)
legend("topright", legend = c(paste("Mean =", means[i], ", SD =", sds[i])), col = i, lwd = 2)
}
# Add a legend
legend("topright", legend = c("Mean = 0, SD = 1", "Mean = 1, SD = 0.5", "Mean = -2, SD = 2"), col = 1:3, lwd = 2)
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(-1, 1),
add = i > 1)
# Define a range of x values
x <- seq(-5, 5, 0.1)
# Define different mean and standard deviation parameters
means <- c(0, 1, -2)
sds <- c(1, 0.5, 2)
# Plot normal distribution curves
for (i in 1:length(means)) {
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(-1, 1),
add = i > 1)
legend("topright", legend = c(paste("Mean =", means[i], ", SD =", sds[i])), col = i, lwd = 2)
}
# Add a legend
legend("topright", legend = c("Mean = 0, SD = 1", "Mean = 1, SD = 0.5", "Mean = -2, SD = 2"), col = 1:3, lwd = 2)
# Define a range of x values
x <- seq(-5, 5, 0.1)
# Define different mean and standard deviation parameters
means <- c(0, 1, -2)
sds <- c(1, 0.5, 2)
# Plot normal distribution curves
for (i in 1:length(means)) {
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(0, 1),
add = i > 1)
legend("topright", legend = c(paste("Mean =", means[i], ", SD =", sds[i])), col = i, lwd = 2)
}
# Add a legend
legend("topright", legend = c("Mean = 0, SD = 1", "Mean = 1, SD = 0.5", "Mean = -2, SD = 2"), col = 1:3, lwd = 2)
# Define a range of x values
x <- seq(-5, 5, 0.1)
# Define different mean and standard deviation parameters
means <- c(0, 1, -2)
sds <- c(1, 0.5, 2)
# Plot normal distribution curves
for (i in 1:length(means)) {
curve(dnorm(x, mean = means[i], sd = sds[i]),
col = i, lwd = 2,
main = "Normal Distribution Curves",
xlab = "x", ylab = "Density",
ylim = c(0, 1),
xlim = c(-5,4),
add = i > 1)
legend("topright", legend = c(paste("Mean =", means[i], ", SD =", sds[i])), col = i, lwd = 2)
}
# Add a legend
legend("topright", legend = c("Mean = 0, SD = 1", "Mean = 1, SD = 0.5", "Mean = -2, SD = 2"), col = 1:3, lwd = 2)
